vector<int> majorityelement(vector<int>& nums){
    int n=nums.size();
    vector<int>result;
    for(int i=0;i<n;i++){
        if(result.size()==0 || result[0]!= nums[i]){
            cnt=0;
            for(int j=0;j<n;j++){
                if(nums[j]==nums[i]){
                    cnt++;
                }
            }
            if(cnt> (n/3)){
                result.push_back(nums[i]);
            }
        }
        if(result.size()==2) break;
    }
    return result;
}

vector<int>majorityele(vector<int>&nums){
    int n=nums.size();
    unordered_map<int,int>um;
    vector<int>res;
    for(int i=0;i<n;i++){
     um[nums[i]]++;
    }
    int s = int(n/3)+1;
    for(int i=0;i<n;i++){
        if(um[nums[i]] ==s){
            res.push_back(nums[i]);
        }
        if(res.size()==2){
            break;
        }
    }
    return res;

}

vector<int> majorityele(vector<int>&nums){
    int n = nums.size();
    int cnt1=0;
    int cnt2=0;
    int el1=INT_MIN, el2=INT_MIN;
    for(int i=0;i<n;i++){
        if(cnt1==0&& el2!= nums[i]){
            cnt1++;
            el1=nums[i];
        }else if(cnt2==0 && el1 != nums[i]){
            cnt2++:
            el2=nums[i];
        }else if(nums[i]==el1){
            cnt1++;
        }else if(nums[i]==el2){
            cnt2++;
        }else{
            cnt1--;
             cnt2--;
        }
    }
    cnt1=0;
    cnt2=0;
            for(int i=0;i<n;i++){
            if(nums[i]==el1){
                cnt1++;
            }
            if(nums[i]==el2){
                cnt2++;
            }
        }
        int mini = n/3+1;
        vector<int>result;
        if(cnt1>=mini){
            result.push_back(el1);
        }
        if(cnt2>=mini){
            result.push_back(el2);
        }
        return result;
    
    }