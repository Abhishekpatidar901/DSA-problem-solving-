long long merge(vector<int>&arr,int low,int mid, int high){
    vector<int>temp;
    int left = low;
    int right =mid+1;
    long long cnt=0;
    while(left<mid && right<=high){
        if(arr[left]<=arr[right]){
            temp.push_back(arr[left]);
            left++;
        }else{
            temp.push_back(arr[right]);
            cnt+= (mid-left+1);
            right++;
        }
    }
    while(left <= mid){
        temp.push_back(arr[left]);
        left++;
    }
    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }
            for (int i = low; i <= high; i++) {
            arr[i] = temp[i - low];
        }
        
        //return the count of inversions
        return cnt;
}
long long mergesort(vector<int>&arr, int low, int high){
    long long count =0;
    if(low<high){

    int mid= low+(high-low)/2;
    cnt+= mergesort(arr,low,mid);
    cnt += mergesort(arr,mid+1,high);
    cnt+= merge(arr,low,mid,high);        
    }
    return cnt;
}
long long countinversion(vector<int>nums){
    int n= nums.size();
    long long count =0;
    return mergesort(nums,0,n-1);
}
