vector<vector<int>>foursum(vector<int>& nums, int target){
    int n = nums.size();
    set<vector<int>>st;

    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            for(int k=j+1;k<n;k++){
                for(int l=k+1;l<n;l++){
                    long long sum = nums[i]+nums[j]+nums[k]+nums[l];
                    if(sum==target){
                        vector<int>temp = {nums[i],nums[j],nums[k],nums[l]};
                        sort(temp.begin(),temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
    }
            vector<vector<int>> ans(st.begin(), st.end());
        return ans;
}

2nd type 
vector<vector<int>>foursum(vector<int>&nums, int target){
set<vector<int>>st;
int n =nums.size();
for(int i=0;i<n;i++){
    for(int j=i+1;j<n;j++){
        set<int>hashset;
    for(int k=j+1;k<n;k++){
      int needed = target-(nums[i]+nums[j]+nums[k]);
      if(hashset.find(needed) != hashset.end()){
        vector<int>s = {nums[i],nums[j],nums[k],needed};
        sort(s.begin(),s.end());
        st.insert(s);
      }
      hashset.insert(nums[k]);
        }
    }
}
vector<vector<int>>ans(st.begin(),st.end());
return ans;
}


3rd way ->
vector<vector<int>>foursum(vector<int>&nums,int target){

    vector<vector<int>>ans;
    int n = nums.size();
    for(int i=0;i<n;i++){
        if(i>0 && nums[i]==nums[i-1])
        {continue;}
        for(int j=i+1;j<n;j++){
            if(j>i+1&& nums[j]==nums[j-1])continue;
        int k = j+1;
        int l=n-1;
        while(l<k){
            long long sum = nums[i]+nums[j]+nums[k]+nums[l];
            if(sum==target){
                vector<int>temp ={nums[i],nums[j],nums[k],nums[l]};
                sort(temp.begin(),temp.end());
                ans.push_back(temp);
                k++;
                l--;
                while(k<l && nums[k]==nums[k-1])k++;
                while(k<l && nums[l]==nums[l+1])l--;
            }else if(sum<target){
             k++;
            }else{
                l--;
            }
        }
        }
    }
    return ans;
}