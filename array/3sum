vector<vector<int>>threesum(vector<int>&nums){
    set<vector<int>>ans;
    int n= nums.size();
    for(int i=0;i<n-2;i++){
        for(int j=i+1;j<n-1;j++){
            for(int k=i+1;k<n;k++){
         if(nums[i]+nums[j]+nums[k]==0){
            vector<int>temp = {i,j,k};
            sort(temp.begin(),temp.end());
           
            ans.push_back(temp);
         }
            }
        }
    }
    vector<vector<int>> anss(ans.begin(),ans.end());

    return anss;
}

2nd way -> 

vector<vector<int>>threesum(vector<int>&nums){
set<vector<int>>ans;
for(int i=0;i<n;i++){
    unordered_map<int,int>um;
    for(int j=i+1;j<n;j++){
        int third =-(nums[i]+nums[j]);
        if(um.find(third)!=um.end()){
            vector<int>temp = {i,j,um[third]};
            sort(temp.begin(),temp.end());
            ans.insert(temp);
                    }
      um.insert(nums[j],j);
    }
}
vector<vector<int>>anss (ans.begin(),ans.end());

return anss;

}


3rd way -> 

vector<vector<int>> threesum(vector<int>& nums){
    vector<vector<int>>ans;
    sort(nums.begin(),nums.end());
    int n = nums.size();
    for(int i=0;i<n;;i++){
        if(i!=0 && nums[i]==nums[i-1])continue;
        int j = i+1;
        int k = n-1;
        while(j<k){
            int sum =nums[i]+nums[j]+nums[k];
            if(sum<0){
                j++;
            }else if(sum>0){
                k--;
            }else{
                vector<int>temp = {nums[i],nums[j],nums[k]};
                ans.push_back(temp);
                j++;
                k--;
                while(j<k && nums[j]==nums[j-1])j++;
                while(j<k && nums[k]==nums[k+1])k--;
            }

        }
    }
    return ans;
}